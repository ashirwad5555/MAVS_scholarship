import React from "react";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";

function ApplicationDetailsModal({ onClose, application }) {
  if (!application) {
    return null;
  }

  // Define the fields to display
  const fieldsToDisplay = [
    "fullName",
    "email_ID", //added on demand
    "mobile_no", //added on demand
    "fathersName",
    "mothersName",
    "birthDate",
    "gender",
    "fathersOccupation",
    "fathersIncome",
    "communicationAddress",
    "tenthMarks", //added on demand
    "twelfthMarks",
    "firstYearMarks",
    "secondYearMarks",
    "thirdYearMarks",
    "lastYearMarks",
    "entrance_exam", //added on demand
    "Entrance_exam_rank_or_marks", //added on demand
    "collegeName",
    "feesReceipt",
    "beneficiaryDetails",
    "Other_Scholarships", //added on demand
    "aadharCard",
    "rationCard",
    "marksheets",
    "incomeCertificate",
    "familyPhoto",
  ];

  // Fields that contain URLs for viewing files
  const fieldsWithViewButton = [
    "aadharCard",
    "rationCard",
    "marksheets",
    "incomeCertificate",
    "familyPhoto",
    "feesReceipt",
  ];

  // added on demand Function to generate and download the PDF
  const generatePDF = async () => {
    const doc = new jsPDF();
    let y = 20; // Start height position for the PDF content
    const fieldLabelX = 15; // X position for field names
    const fieldValueX = 92; // X position for field values (increased for more space)

    // Title styling
    doc.setFont("helvetica", "bold");
    doc.setFontSize(22);
    doc.setTextColor(0, 102, 204); // A nice blue color for the title
    doc.text("Application Details", 105, y, { align: "center" });
    y += 20;

    // Loop through the fields and add content with styling
    fieldsToDisplay.forEach((field) => {
      const value = application[field] || "N/A";

      // Section Title Styling (Field Names)
      doc.setFont("helvetica", "bold");
      doc.setFontSize(14);
      doc.setTextColor(50, 50, 50); // Dark gray for field titles
      doc.text(`${field}:`, fieldLabelX, y);

      // Check if field contains URL to render view button
      if (fieldsWithViewButton.includes(field)) {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 255); // Set link color to blue
        doc.textWithLink("View", fieldValueX, y, { url: value });
        doc.setTextColor(30, 30, 30); // Reset color for future text
      } else {
        // Handle long text wrapping
        const lines = doc.splitTextToSize(value.toString(), 120);
        doc.setFont("helvetica", "normal");
        doc.setFontSize(12);
        doc.text(lines, fieldValueX, y);
        y += lines.length * 8; // Adjust height based on number of lines
      }

      y += 10; // Extra spacing between fields

      // Check if the content exceeds the page height, add a new page if necessary
      if (y > doc.internal.pageSize.height - 20) {
        doc.addPage();
        y = 20; // Reset y position for new page
      }
    });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text(
      "Generated by MAVS Vidya-Adhar Program",
      105,
      doc.internal.pageSize.height - 10,
      { align: "center" }
    );

    // Save the generated PDF
    doc.save(`${application.fullName}_Application_Details.pdf`);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div
        className="bg-white p-6 rounded-lg shadow-md relative"
        style={{
          width: "85%", // Custom width
          maxWidth: "800px", // Max width
          height: "90%", // Increased custom height
          maxHeight: "95%", // Increased max height
        }}
      >
        <h2 className="text-xl font-semibold mb-4">Application Details</h2>
        <div className="overflow-y-auto max-h-full">
          {fieldsToDisplay.map((field) => (
            <div key={field} className="mb-2 flex justify-between items-center">
              <div className="flex-1 text-left">
                <p className="text-gray-700 font-medium">
                  <strong className="text-xl">{field}:</strong>
                  {fieldsWithViewButton.includes(field) ? null : (
                    <span> {application[field]}</span>
                  )}
                </p>
              </div>
              {fieldsWithViewButton.includes(field) && (
                <div className="ml-4">
                  <a
                    href={application[field]}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded"
                  >
                    View
                  </a>
                </div>
              )}
            </div>
          ))}
        </div>
        <button
          onClick={onClose}
          className="absolute top-2 right-2 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
        >
          Close
        </button>
        <button
          onClick={generatePDF}
          className="absolute top-2 right-20 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mx-2"
        >
          Download PDF
        </button>
      </div>
    </div>
  );
}

export default ApplicationDetailsModal;
